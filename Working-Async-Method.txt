# Good, but doesn't expose canceltask:
$Post = @"
using System;
using System.IO;
using System.Net;
using System.Threading;
using System.Threading.Tasks;

namespace MyNamespace
{
    public class WebRequestHandler
    {
        private CancellationTokenSource _cancellationTokenSource;

        public async Task PostAndStreamResponse(string url, string requestBody, string outputPath)
        {
            try
            {
                _cancellationTokenSource = new CancellationTokenSource();

                // Register SIGINT and SIGTERM handlers
                Console.CancelKeyPress += (_, e) =>
                {
                    e.Cancel = true;
                    _cancellationTokenSource.Cancel();
                };
                AppDomain.CurrentDomain.ProcessExit += (_, __) =>
                {
                    _cancellationTokenSource.Cancel();
                };

                // Create a HTTP request
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                request.Method = "POST";
                request.ContentType = "application/json";

                // Write request body
                using (var streamWriter = new StreamWriter(request.GetRequestStream()))
                {
                    await streamWriter.WriteAsync(requestBody);
                    await streamWriter.FlushAsync();
                }

                // Get response
                using (HttpWebResponse response = (HttpWebResponse)await request.GetResponseAsync())
                using (Stream responseStream = response.GetResponseStream())
                using (FileStream fileStream = new FileStream(outputPath, FileMode.Create))
                {
                    // Stream response to file
                    await responseStream.CopyToAsync(fileStream, 81920, _cancellationTokenSource.Token);
                }
            }
            catch (OperationCanceledException)
            {
                // Clean up resources
                Console.WriteLine("Operation canceled. Closing connection...");
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: {ex.Message}");
	throw new Exception ("An error has occured: " + ex.Message, ex);
            }
        }
    }
}
"@

#Test to expose canceltask:

$Post = @"
using System;
using System.IO;
using System.Net;
using System.Threading;
using System.Threading.Tasks;

namespace MyNamespace
{
    public class WebRequestHandler : IDisposable
    {
        private CancellationTokenSource _cancellationTokenSource;

        public CancellationTokenSource CancellationTokenSource
        {
            get { return _cancellationTokenSource; }
            private set { _cancellationTokenSource = value; }
        }

        public WebRequestHandler()
        {
            CancellationTokenSource = new CancellationTokenSource();
        }

        public async Task PostAndStreamResponse(string url, string requestBody, string outputPath)
        {
            try
            {
                // Register SIGINT and SIGTERM handlers
                Console.CancelKeyPress += (_, e) =>
                {
                    e.Cancel = true;
                    CancellationTokenSource.Cancel();
                };
                AppDomain.CurrentDomain.ProcessExit += (_, __) =>
                {
                    CancellationTokenSource.Cancel();
                };

                // Create a HTTP request
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                request.Method = "POST";
                request.ContentType = "application/json";

                // Write request body
                using (var streamWriter = new StreamWriter(request.GetRequestStream()))
                {
                    await streamWriter.WriteAsync(requestBody);
                    await streamWriter.FlushAsync();
                }

                // Get response
                using (HttpWebResponse response = (HttpWebResponse)await request.GetResponseAsync())
                using (Stream responseStream = response.GetResponseStream())
                using (FileStream fileStream = new FileStream(outputPath, FileMode.Create))
                {
                    // Stream response to file
                    await responseStream.CopyToAsync(fileStream, 81920, CancellationTokenSource.Token);
                }
            }
            catch (OperationCanceledException)
            {
                // Clean up resources
                Console.WriteLine("Operation canceled. Closing connection...");
            }
            catch (Exception ex)
            {
            File.AppendAllText(outputPath, "ERROR!?! Error occurred while sending request to URL: {url}, Exception Message: {ex.Message}" + Environment.NewLine);
            throw new Exception("An error has occurred: " + ex.Message, ex);
            }
        }

        public void Dispose()
        {
            CancellationTokenSource.Dispose();
        }
    }
}
"@

add-type -typedefinition $Post

rm D:\test.log
cd D:\git\LMStudio-AI-Client\
$Server = "localhost"
$Port = 1234
[string]$EndPoint = $Server + ":" + $Port
$CompletionURI = "http://$EndPoint/v1/chat/completions"
$Body = get-content .\bodyexample.json | ConvertFrom-Json
$Body.stream = $True

$handler = New-Object MyNamespace.WebRequestHandler

$handler.PostAndStreamResponse($$CompletionURI, ($Body | Convertto-Json), "D:\test.log")

$Server = "localhost"
$Port = 1234
[string]$EndPoint = $Server + ":" + $Port
$ModelURI = "http://$EndPoint/v1/models"
$CompletionURI = "http://$EndPoint/v1/chat/completions"

